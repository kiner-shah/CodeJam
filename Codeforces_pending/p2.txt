// Codeforces Round #435 (Div. 2) B
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <unordered_set>
#include <vector>
using namespace std;
typedef struct node {
    int nodeval;
    vector<int> adj;
} Node;
int main() {
    int temp, i, n, u, v;
    unordered_set<int> one;
    unordered_set<int> two;
    // unordered_set<pair<int, int> > edges;
    cin>>n;
    Node nodes[n];
    for(i = 0; i < n; i++) nodes[i].nodeval = i;
    i = 0;
    while(i < n) {
        cin>>u>>v;
        // if(u > v) { temp = u; u = v; v = temp; }
        if((one.find(v-1) != one.end() && two.find(u-1) != two.end()) || (two.find(v-1) != two.end() && one.find(u-1) != one.end())) {
            cout<<u<<" "<<v<<" R0\n";
        }
        else if(one.find(v-1) != one.end() && one.find(u-1) != one.end()) {
            cout<<u<<" "<<v<<" R1\n";
            one.erase(v-1); 
            two.insert(v-1);
            for(int x : nodes[v-1].adj) {
                two.erase(x);
                one.insert(x);
            }
        }
        else if(one.find(v-1) != one.end() && one.find(u-1) == one.end()) {
            cout<<u<<" "<<v<<" R\n";
            one.insert(v-1);
            two.insert(u-1);
        }
        else if(one.find(v-1) == one.end() && one.find(u-1) != one.end()) {
            cout<<u<<" "<<v<<" R2\n";
            one.insert(u-1); two.insert(v-1);
        }
        else {
            cout<<u<<" "<<v<<" R3\n";
            one.insert(u-1); two.insert(v-1);
        }
        // if(u > v) { one.insert(v-1); two.insert(u-1); }
        // else { one.insert(u-1); two.insert(v-1); }
        nodes[u-1].adj.push_back(v-1);
        nodes[v-1].adj.push_back(u-1);
        // edges.insert(make_pair(u-1, v-1));
        // for(int p : one) cout<<p+1<<" "; cout<<endl;
        // for(int p : two) cout<<p+1<<" "; cout<<endl;
        i++;
    }
    for(int p : one) cout<<p+1<<" "; cout<<endl;
    for(int p : two) cout<<p+1<<" "; cout<<endl;
    // int total_edges = one.size() * two.size();
    int count = 0;
    for(int p : one) {
        for(int q : two) {
            if(find(nodes[p].adj.begin(), nodes[p].adj.end(), q) == nodes[p].adj.end()) {
                //cout<<p+1<<" "<<q+1<<endl;
                count++;
            }
        }
    }
    cout<<count;
    return 0;
}